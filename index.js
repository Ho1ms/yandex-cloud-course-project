// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
const { session, Telegraf, Markup, Telegram } = require('telegraf');
const axios = require('axios');
const { ChartJSNodeCanvas } = require('chartjs-node-canvas');
const XMLParser = require('xml2js').parseString;

// –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Telegraf –∏ –ø–µ—Ä–µ–¥–∞—ë–º —Ç—É–¥–∞ BOT_TOKEN
const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use(session())

const currency_codes = {
    USD: "R01235",
    EUR: "R01239",
    CNY: "R01375",
};

const currencies = ['RUB', 'USD', 'EUR', 'CNY']
// –ó–∞–¥–∞—ë–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±–æ—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–¥—ã /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.start((ctx) => {
    ctx.reply(`<b>üëã –ü—Ä–∏–≤–µ—Ç ${ctx.from.username}!</b>\n–Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ –±–æ—Ç, –Ø - —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫!\n\n<b>üìï –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</b>\n1) –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É <code>/currency</code>\n2) –î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ - –∫–æ–º–∞–Ω–¥—É <code>/convert</code>\n3) –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç - –∫–æ–º–∞–Ω–¥—É <code>/history</code>`, { parse_mode: 'HTML' });
});

// –ó–∞–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã /currency, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ API —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å USD, EUR –∏ CNY.
bot.command('currency', async (ctx) => {

    try {
        const response = await axios.get('https://api.exchangerate-api.com/v4/latest/RUB');
        const rates = response.data.rates;
        ctx.reply(`–ö—É—Ä—Å –†—É–±–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n <b>USD: ${Math.round(1 / rates.USD, 2)}\n EUR: ${Math.round(1 / rates.EUR, 2)}\n CNY: ${Math.round(1 / rates.CNY, 2)}</b>`, { parse_mode: 'HTML' });
    } catch (error) {
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç :(');
    }
});

// –ó–∞–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥—ã /convert, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–∑–Ω–∞—Ç—å —Å—É–º–º—É –≤ –∑–∞–¥–∞–Ω–æ–π –≤–∞–ª—é—Ç–µ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –µ—ë –≤ –∂–µ–ª–∞–µ–º—É—é.
bot.command('convert', async (ctx) => {
    ctx.session.Messages = [ctx.message.message_id]
    ctx.session.isConvert = true
    ctx.session.convertStep = 1
    msg = await ctx.reply('–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∏—Ç—å –¥–ª—è –æ—Ç–º–µ–Ω—ã.', 
    
    Markup.inlineKeyboard([ Markup.callbackButton('–û—Ç–º–µ–Ω–∏—Ç—å', 'clear') ]).extra())
    ctx.session.Messages.push(msg.message_id)
});

bot.action("clear", (ctx) => {
    ctx.session = null    
    ctx.session.Messages.forEach(m => {
        ctx.deleteMessage(m)
    });
})

bot.hears(/\d/, async (ctx, next) => {
    if (!ctx.session.isConvert || ctx.session.convertStep !== 1) {
        return await next()
    }
    ctx.session.convertStep = 2
    ctx.session.convertSum = ctx.message.text

    await ctx.deleteMessage()
    await ctx.telegram.editMessageText(ctx.chat.id, ctx.session.Messages[1],null, `–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–µ ${ctx.message.text} –µ–¥–∏–Ω–∏—Ü`)
    
    const buttons = currencies.map(currency => [Markup.callbackButton(currency, currency)])
    buttons.push([Markup.callbackButton('–û—Ç–º–µ–Ω–∏—Ç—å', 'clear')])

    await ctx.telegram.editMessageReplyMarkup(ctx.chat.id, ctx.session.Messages[1], null,  Markup.inlineKeyboard(buttons))

})

bot.action(/\w{3}/, async (ctx, next) => {
    if (!ctx.session.isConvert || ctx.session.convertStep !== 2) {
        return await next()
    }
    ctx.session.convertCurrency = ctx.callbackQuery.data
    ctx.session.convertStep = 3

    await ctx.telegram.editMessageText(ctx.chat.id, ctx.session.Messages[1],null, `–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ${ctx.session.convertSum} ${ctx.session.convertCurrency}`)
    
    const buttons = currencies.map(currency => {
        if (currency != ctx.callbackQuery.data) {
            return [Markup.callbackButton(currency, currency)]
        }
    }).filter(i => i != undefined)
    buttons.push([Markup.callbackButton('–û—Ç–º–µ–Ω–∏—Ç—å', 'clear')])

    await ctx.telegram.editMessageReplyMarkup(ctx.chat.id, ctx.session.Messages[1], null,  Markup.inlineKeyboard(buttons))
})

bot.action(/\w{3}/, async (ctx, next) => {
    if (!ctx.session.isConvert || ctx.session.convertStep !== 3) {
        return await next()
    }
    const {convertSum, convertCurrency} = ctx.session;
    const to = ctx.callbackQuery.data;

    try {
        const response = await axios.get(`https://api.exchangerate-api.com/v4/latest/${convertCurrency}`);
        const rates = response.data.rates;
        const convertedSum = convertSum * rates[to];
        ctx.reply(`–ü—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ <b>${convertSum} ${convertCurrency}</b> –≤ <b>${to}</b> –≤—ã –ø–æ–ª—É—á–∏—Ç–µ: <b>${convertedSum} ${to}</b>`, { parse_mode: 'HTML' });
    } catch (error) {
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç—ã');
    }
    
    ctx.session.Messages.forEach(m => {
        ctx.deleteMessage(m)
    });
    ctx.session = null
})

bot.command('history', async (ctx) => {
    ctx.deleteMessage(ctx.message.message_id)
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫—É—Ä—Å–∞ –∑–∞ –Ω–µ–¥–µ–ª—é.', Markup.inlineKeyboard(currencies.slice(1).map(currency => [Markup.callbackButton(currency, 'history-'+currency)])).extra())
})



const renderChart = async (data) => {
    const configuration = {
        type: 'line',
        data: data
    };
    const width = 400; //px
    const height = 400; //px
    const backgroundColour = 'white'; // Uses https://www.w3schools.com/tags/canvas_fillstyle.asp
    const chartJSNodeCanvas = new ChartJSNodeCanvas({ width, height, backgroundColour});
    const image = await chartJSNodeCanvas.renderToBuffer(configuration);

    return image;
};

bot.action(/history-/, async (ctx) => {
    const currency = ctx.callbackQuery.data.split('-')[1]
    
    const d = new Date()
    const d_e = ((d.getDate() < 10)?"0":"") + d.getDate() +"/"+(((d.getMonth()+1) < 10)?"0":"") + (d.getMonth()+1) +"/"+ d.getFullYear();
    const a = new Date(new Date() - 30*24*60*60*1000)
    const d_s = ((a.getDate() < 10)?"0":"") + a.getDate() +"/"+(((a.getMonth()+1) < 10)?"0":"") + (a.getMonth()+1) +"/"+ a.getFullYear();
    
    const label = [];
    const values = [];

    try {
        const response = await axios.get(`https://cbr.ru/scripts/XML_dynamic.asp?date_req1=${d_s}&date_req2=${d_e}&VAL_NM_RQ=${currency_codes[currency]}`);
        let xml = response.data
        XMLParser(xml, (err, res) => {
            const json = JSON.parse(JSON.stringify(res, null, 4))
            for (let val in json.ValCurs.Record) {
                label.push(json.ValCurs.Record[val]['$']['Date'])
                values.push(parseFloat(json.ValCurs.Record[val].Value[0]))
            }
        })
    } catch (error) {
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ');
    }
    
    const data = {
        labels: label, // –î–∞—Ç—ã
        datasets: [{
            label: `–ö—É—Ä—Å ${currency} –∑–∞ –º–µ—Å—è—Ü`,
            data: values, // –¶–µ–Ω—ã
            fill: false,
            borderColor: 'blue'
        }]
    };
    const chartImage = await renderChart(data);
    ctx.replyWithPhoto( { source: chartImage });
})
// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
module.exports.handler = async function (event, context) {
    const message = JSON.parse(event['messages'][0]['details']['message']['body']);
    await bot.handleUpdate(message);
    return {
        statusCode: 500,
        body: event.string,
    };
};
